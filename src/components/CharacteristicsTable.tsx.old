'use client';

import { useState } from 'react';
import { Character, CharacteristicValue, STAT_CATEGORIES, generateStatId } from '@/types/gameData';

interface CharacteristicsTableProps {
  characteristics: Character['characteristics'];
  customStats: Character['customStats'];
  onCharacteristicChange?: (key: keyof Character['characteristics'], value: CharacteristicValue) => void;
  onCustomStatAdd?: (category: string, name: string) => void;
  onCustomStatChange?: (category: string, key: string, value: CharacteristicValue) => void;
  isEditable?: boolean;
}

type CategoryMap = {
  [key: string]: {
    title: string;
    stats: {
      [key: string]: [string, CharacteristicValue][];
    };
  };
};

export default function CharacteristicsTable({ 
  characteristics, 
  customStats,
  onCharacteristicChange,
  onCustomStatAdd,
  onCustomStatChange,
  isEditable = false 
}: CharacteristicsTableProps) {
  const [editingCell, setEditingCell] = useState<string | null>(null);
  const [expandedCategory, setExpandedCategory] = useState<string | null>(null);
  const [newStatName, setNewStatName] = useState<string>('');
  const [addingToCategory, setAddingToCategory] = useState<string | null>(null);

  const handleCellClick = (key: string) => {
    if (isEditable) {
      setEditingCell(key);
    }
  };

  const handleValueChange = (key: string, value: string | number) => {
    const newStats = { ...characteristics };
    const keys = key.split('.');
    let current: any = newStats;

    // Gestione speciale per i campi di combattimento
    const combatFields = ['armatura', 'protezione', 'feritaGrave', 'puntiFerita', 'oggetti'];
    const isCombatField = combatFields.some(field => key.includes(field));
    const isWeaponField = key.includes('arma');

    if (isCombatField || isWeaponField) {
      // Per i campi di combattimento e armi, mantieni il valore come stringa
      for (let i = 0; i < keys.length - 1; i++) {
        current = current[keys[i]];
      }
      current[keys[keys.length - 1]] = value;
    } else {
      // Per tutti gli altri campi, gestisci come prima
      for (let i = 0; i < keys.length - 1; i++) {
        current = current[keys[i]];
      }
      if (typeof value === 'string') {
        current[keys[keys.length - 1]] = value;
      } else {
        current[keys[keys.length - 1]].baseValue = value;
      }
    }

    if (onCharacteristicChange) {
      onCharacteristicChange(key as keyof Character['characteristics'], current as CharacteristicValue);
    }
    setEditingCell(null);
  };

  const handleCustomStatAdd = (category: string) => {
    if (onCustomStatAdd && newStatName.trim()) {
      onCustomStatAdd(category, newStatName.trim());
      setNewStatName('');
      setAddingToCategory(null);
    }
  };

  const handleCustomStatChange = (category: string, key: string, value: string) => {
    if (onCustomStatChange) {
      onCustomStatChange(category, key, {
        name: customStats[category][key].name,
        userValue: value
      });
    }
    setEditingCell(null);
  };

  const categorizedCharacteristics: CategoryMap = Object.entries(characteristics).reduce((acc, [key, value]) => {
    let category = '';
    let stat = '';
    
    // Identità
    if (key.startsWith('nome') || key.startsWith('sesso') || key.startsWith('eta') || 
        key.startsWith('nazionalita') || key.startsWith('classe') || key.startsWith('culto') || 
        key.startsWith('elan') || key.startsWith('descrizione')) {
      category = 'Identità';
      stat = 'Info';
    }
    // Caratteristiche Base
    else if (key.startsWith('for') || key.startsWith('cos') || key.startsWith('tag') ||
             key.startsWith('int') || key.startsWith('man') || key.startsWith('des') ||
             key.startsWith('fas')) {
      category = 'Caratteristiche';
      stat = 'Base';
    }
    // Combattimento
    else if (key.startsWith('armatura') || key.startsWith('protezione') || 
             key.startsWith('feritaGrave') || key.startsWith('puntiFerita') ||
             key.startsWith('oggetti') || key.startsWith('arma')) {
      category = 'Combattimento';
      stat = key.startsWith('arma') ? 'Armi' : 'Difesa';
    }
    // Stats e sottocategorie
    else {
      category = 'Stats';
      if (key.startsWith('arrampicarsi') || key.startsWith('saltare') || 
          key.startsWith('nuotare') || key.startsWith('schivare') || 
          key.startsWith('cavalcare') || key.startsWith('cadere')) {
        stat = 'Agilità';
      } else if (key.startsWith('reputazione') || key.startsWith('persuasione') || 
                 key.startsWith('oratoria') || key.startsWith('cantare')) {
        stat = 'Comunicazione';
      } else if (key.startsWith('arte') || key.startsWith('prontoSoccorso') || 
                 key.startsWith('memoria') || key.startsWith('navigazione') ||
                 key.startsWith('conoscenzaVeleni') || key.startsWith('valutareTesori') ||
                 key.startsWith('cartografia') || key.startsWith('conoscenzaMusica') ||
                 key.startsWith('conoscenzaPiante')) {
        stat = 'Conoscenza';
      } else if (key.startsWith('lingua') || key.startsWith('alto') || 
                 key.startsWith('tardo') || key.startsWith('mabden') || 
                 key.startsWith('mong') || key.startsWith('org') || 
                 key.startsWith('pande') || key.startsWith('yuric')) {
        stat = 'Leggere-Scrivere/Parlare';
      } else if (key.startsWith('giocoleria') || key.startsWith('prestidigitazione') || 
                 key.startsWith('trappole') || key.startsWith('scassinare') || 
                 key.startsWith('nodi')) {
        stat = 'Manipolazione';
      } else if (key.startsWith('equilibrio') || key.startsWith('annusare') || 
                 key.startsWith('osservare') || key.startsWith('seguireTracce') || 
                 key.startsWith('ascoltare') || key.startsWith('cercare') || 
                 key.startsWith('gustare')) {
        stat = 'Percezione';
      } else if (key.startsWith('agguato') || key.startsWith('borseggiare') || 
                 key.startsWith('intrufolarsi') || key.startsWith('nascondere') || 
                 key.startsWith('nascondersi')) {
        stat = 'Furtività';
      } else if (key.startsWith('evocare')) {
        stat = 'Evocazione';
      }
    }

    if (!acc[category]) {
      acc[category] = {
        title: category,
        stats: {}
      };
    }

    if (!acc[category].stats[stat]) {
      acc[category].stats[stat] = [];
    }
    acc[category].stats[stat].push([key, value]);

    return acc;
  }, {} as CategoryMap);

  const toggleCategory = (category: string) => {
    setExpandedCategory(expandedCategory === category ? null : category);
  };

  const renderIdentitySection = (stats: { [key: string]: [string, CharacteristicValue][] }) => (
    <div className="p-4">
      <table className="w-full border-collapse">
        <tbody>
          {Object.values(stats).flat().map(([key, characteristic]) => (
            <tr key={key} className="border-b border-gray-700">
              <td className="py-2 w-1/3 text-gray-400">{characteristic.name}</td>
              <td className="py-2">
                {editingCell === key && isEditable ? (
                  <input
                    type="text"
                    className="w-full p-1 bg-gray-700 rounded"
                    value={characteristic.userValue ?? characteristic.baseValue ?? ''}
                    onChange={(e) => handleValueChange(key, e.target.value)}
                    onBlur={() => setEditingCell(null)}
                    autoFocus
                  />
                ) : (
                  <span
                    className={`block w-full cursor-${isEditable ? 'pointer' : 'default'} ${
                      characteristic.userValue !== undefined ? 'text-white' : 'text-gray-500 italic'
                    }`}
                    onClick={() => handleCellClick(key)}
                  >
                    {(characteristic.userValue ?? characteristic.baseValue) || 'Aggiungi...'}
                  </span>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );

  const renderCharacteristicsSection = (stats: { [key: string]: [string, CharacteristicValue][] }) => (
    <div className="p-4">
      <table className="w-full border-collapse">
        <tbody>
          {Object.values(stats).flat().map(([key, characteristic]) => (
            <tr key={key} className="border-b border-gray-700">
              <td className="py-2 w-2/3">{characteristic.name}</td>
              <td className="py-2 text-right">
                {editingCell === key && isEditable ? (
                  <input
                    type="text"
                    className="w-20 p-1 bg-gray-700 rounded text-center"
                    value={characteristic.userValue ?? characteristic.baseValue ?? ''}
                    onChange={(e) => handleValueChange(key, e.target.value)}
                    onBlur={() => setEditingCell(null)}
                    autoFocus
                  />
                ) : (
                  <span
                    className={`cursor-${isEditable ? 'pointer' : 'default'} ${
                      characteristic.userValue !== undefined ? 'text-yellow-500' : ''
                    }`}
                    onClick={() => handleCellClick(key)}
                  >
                    {characteristic.userValue ?? characteristic.baseValue}
                  </span>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );

  const renderStatsSection = (stats: { [key: string]: [string, CharacteristicValue][] }, category: string) => (
    <div className="space-y-6 p-4">
      {Object.entries(stats).map(([statName, characteristics]) => (
        <div key={statName}>
          <h3 className="text-lg font-semibold mb-2 text-yellow-500">{statName}</h3>
          <table className="w-full border-collapse">
            <tbody>
              {characteristics.map(([key, characteristic]) => (
                <tr key={key} className="border-b border-gray-700">
                  <td className="py-2 w-2/3">
                    <div className="flex items-center">
                      <input
                        type="checkbox"
                        className="mr-2 form-checkbox h-4 w-4 text-yellow-500"
                        checked={characteristic.userValue !== undefined}
                        onChange={() => {
                          if (characteristic.userValue !== undefined) {
                            handleValueChange(key, '');
                          } else {
                            handleValueChange(key, '0');
                          }
                        }}
                      />
                      {characteristic.name}
                    </div>
                  </td>
                  <td className="py-2 text-right">
                    {editingCell === key && isEditable ? (
                      <input
                        type="text"
                        className="w-20 p-1 bg-gray-600 rounded text-center"
                        value={characteristic.userValue ?? characteristic.baseValue ?? ''}
                        onChange={(e) => handleValueChange(key, e.target.value)}
                        onBlur={() => setEditingCell(null)}
                        autoFocus
                      />
                    ) : (
                      <span
                        className={`cursor-${isEditable ? 'pointer' : 'default'} ${
                          characteristic.userValue !== undefined ? 'text-yellow-500' : ''
                        }`}
                        onClick={() => handleCellClick(key)}
                      >
                        {characteristic.userValue ?? characteristic.baseValue}
                      </span>
                    )}
                  </td>
                </tr>
              ))}

              {/* Custom stats for this category */}
              {customStats[category]?.[statName] && Object.entries(customStats[category][statName]).map(([key, stat]) => (
                <tr key={key} className="border-b border-gray-700">
                  <td className="py-2 w-2/3">
                    <div className="flex items-center">
                      <input
                        type="checkbox"
                        className="mr-2 form-checkbox h-4 w-4 text-yellow-500"
                        checked={stat.userValue !== undefined}
                        onChange={() => {
                          handleCustomStatChange(category, key, stat.userValue !== undefined ? '' : '0');
                        }}
                      />
                      {stat.name}
                    </div>
                  </td>
                  <td className="py-2 text-right">
                    {editingCell === key && isEditable ? (
                      <input
                        type="text"
                        className="w-20 p-1 bg-gray-600 rounded text-center"
                        value={stat.userValue ?? ''}
                        onChange={(e) => handleCustomStatChange(category, key, e.target.value)}
                        onBlur={() => setEditingCell(null)}
                        autoFocus
                      />
                    ) : (
                      <span
                        className={`cursor-${isEditable ? 'pointer' : 'default'} ${
                          stat.userValue !== undefined ? 'text-yellow-500' : ''
                        }`}
                        onClick={() => handleCellClick(key)}
                      >
                        {stat.userValue}
                      </span>
                    )}
                  </td>
                </tr>
              ))}

              {/* Add new stat button */}
              {isEditable && (
                <tr className="border-b border-gray-700">
                  <td colSpan={2} className="py-2">
                    {addingToCategory === `${category}_${statName}` ? (
                      <div className="flex items-center space-x-2">
                        <input
                          type="text"
                          className="flex-1 p-1 bg-gray-700 rounded"
                          value={newStatName}
                          onChange={(e) => setNewStatName(e.target.value)}
                          placeholder="Nome nuova abilità..."
                          onKeyPress={(e) => {
                            if (e.key === 'Enter') {
                              handleCustomStatAdd(category);
                            }
                          }}
                          autoFocus
                        />
                        <button
                          className="px-2 py-1 bg-yellow-500 text-black rounded hover:bg-yellow-400"
                          onClick={() => handleCustomStatAdd(category)}
                        >
                          Aggiungi
                        </button>
                        <button
                          className="px-2 py-1 bg-gray-600 rounded hover:bg-gray-500"
                          onClick={() => {
                            setAddingToCategory(null);
                            setNewStatName('');
                          }}
                        >
                          Annulla
                        </button>
                      </div>
                    ) : (
                      <button
                        className="w-full text-left text-gray-400 hover:text-white"
                        onClick={() => setAddingToCategory(`${category}_${statName}`)}
                      >
                        + Aggiungi nuova abilità...
                      </button>
                    )}
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      ))}
    </div>
  );

  return (
    <div className="space-y-4">
      {Object.entries(categorizedCharacteristics).map(([category, { title, stats }]) => (
        <div key={category} className="bg-gray-800 rounded-lg overflow-hidden">
          <button
            className="w-full px-4 py-2 bg-gray-700 text-left font-semibold flex justify-between items-center"
            onClick={() => toggleCategory(category)}
          >
            {title}
            <span>{expandedCategory === category ? '▼' : '▶'}</span>
          </button>
          
          {expandedCategory === category && (
            <>
              {category === 'Identità' && renderIdentitySection(stats)}
              {(category === 'Caratteristiche' || category === 'Combattimento' || category === 'Inventario') && 
                renderCharacteristicsSection(stats)}
              {category === 'Stats' && renderStatsSection(stats, category)}
            </>
          )}
        </div>
      ))}
    </div>
  );
} 