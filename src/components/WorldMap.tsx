'use client';

import { useState } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { useRouter } from 'next/navigation';

// Definizione delle regioni sulla mappa
interface Region {
  id: string;
  name: string;
  shape: 'poly' | 'rect' | 'circle';
  coords: number[];
  alt: string;
  href: string;
}

// Le coordinate sono in percentuale rispetto alla dimensione dell'immagine
const regions: Region[] = [
  {
    id: 'vilmir',
    name: 'Vilmir',
    shape: 'poly',
    coords: [578, 213, 575, 215, 568, 224, 569, 228, 566, 235, 568, 240, 571, 247, 573, 249, 575, 256, 575, 258, 576, 264, 577, 270, 578, 271, 579, 274, 581, 276, 581, 280, 580, 282, 578, 286, 578, 289, 577, 292, 577, 294, 576, 298, 577, 301, 577, 305, 578, 312, 578, 313, 578, 316, 578, 319, 578, 321, 576, 326, 575, 328, 574, 330, 572, 331, 570, 331, 563, 333, 563, 335, 563, 338, 564, 343, 563, 346, 559, 356, 558, 357, 557, 361, 556, 361, 557, 369, 557, 370, 560, 374, 561, 376, 563, 378, 567, 380, 573, 380, 578, 379, 580, 379, 587, 376, 590, 374, 592, 372, 600, 374, 603, 374, 607, 372, 613, 370, 616, 367, 617, 365, 614, 359, 617, 354, 617, 354, 621, 354, 634, 351, 634, 351, 631, 347, 631, 343, 631, 337, 631, 329, 629, 323, 634, 314, 636, 309, 640, 304, 643, 299, 643, 295, 644, 292, 644, 286, 643, 277, 642, 272, 647, 264, 652, 262, 652, 271, 652, 275, 655, 282, 660, 291, 660, 294, 657, 300, 654, 304, 648, 307, 648, 308, 646, 314, 646, 319, 646, 319, 649, 326, 649, 326, 651, 333, 652, 335, 654, 338, 657, 341, 661, 345, 666, 345, 674, 345, 677, 345, 681, 345, 686, 344, 692, 342, 695, 340, 697, 340, 701, 336, 709, 327, 711, 324, 712, 319, 712, 313, 712, 308, 707, 302, 705, 300, 706, 295, 707, 289, 708, 284, 709, 278, 710, 276, 711, 273, 719, 267, 712, 273, 716, 278, 718, 283, 718, 288, 718, 290, 718, 295, 717, 298, 717, 301, 716, 305, 716, 306, 716, 311, 716, 314, 716, 316, 718, 335, 718, 338, 718, 343, 721, 350, 721, 352, 724, 354, 730, 355, 735, 355, 739, 355, 744, 353, 747, 351, 753, 348, 756, 346, 758, 343, 760, 341, 761, 339, 763, 334, 765, 326, 765, 325, 768, 320, 776, 316, 776, 316, 779, 312, 779, 304, 781, 296, 780, 292, 775, 287, 770, 281, 771, 275, 773, 272, 776, 271, 783, 277, 784, 279, 788, 279, 791, 277, 793, 270, 789, 260, 789, 260, 788, 256, 781, 256, 779, 257, 777, 258, 769, 259, 764, 258, 762, 263, 757, 267, 753, 266, 749, 265, 745, 264, 740, 261, 734, 260, 732, 258, 728, 255, 725, 253, 723, 250, 720, 245, 718, 242, 718, 242, 713, 238, 711, 237, 706, 233, 703, 232, 699, 231, 691, 230, 683, 229, 683, 229, 674, 226, 674, 226, 673, 224, 668, 222, 663, 223, 649, 221, 647, 220, 642, 215, 643, 210, 640, 210, 637, 211, 631, 214, 629, 214, 617, 214, 616, 216, 615, 216, 612, 215, 609, 214, 609, 214, 602, 217, 600, 219, 596, 223, 596, 223, 592, 223, 589, 223, 583, 219, 582, 216, 581, 214],
    alt: 'Vilmir',
    href: '/nationalities/vilmir'
  },
  {
    id: 'ilmiora',
    name: 'Ilmiora',
    shape: 'poly',
    coords: [574, 211, 576, 203, 577, 199, 576, 188, 584, 183, 591, 181, 589, 170, 584, 158, 576, 151, 579, 138, 583, 133, 587, 132, 591, 126, 587, 121, 579, 121, 574, 108, 570, 103, 557, 103, 562, 90, 566, 80, 564, 74, 563, 66, 564, 61, 566, 55, 569, 51, 571, 53, 572, 55, 573, 60, 574, 60, 578, 55, 581, 54, 582, 54, 586, 58, 588, 60, 590, 64, 591, 66, 593, 68, 594, 70, 597, 71, 600, 69, 608, 65, 609, 58, 611, 50, 616, 47, 620, 44, 627, 47, 630, 48, 636, 51, 641, 51, 655, 47, 659, 55, 659, 61, 658, 68, 651, 69, 653, 73, 656, 80, 655, 82, 652, 87, 652, 93, 653, 98, 657, 102, 662, 106, 665, 109, 674, 112, 678, 114, 690, 117, 707, 116, 715, 114, 736, 117, 739, 125, 738, 130, 733, 132, 734, 137, 737, 137, 744, 144, 738, 145, 738, 150, 746, 157, 748, 158, 759, 164, 761, 165, 764, 169, 766, 178, 767, 180, 772, 185, 773, 187, 776, 193, 777, 196, 786, 205, 786, 207, 788, 211, 788, 213, 789, 218, 787, 223, 787, 226, 788, 233, 789, 234, 790, 243, 790, 248, 788, 253, 785, 255, 781, 256, 779, 256, 774, 257, 767, 257, 763, 258, 760, 261, 756, 264, 753, 264, 744, 264, 742, 264, 733, 260, 730, 258, 726, 255, 722, 252, 715, 246, 712, 242, 710, 240, 708, 237, 704, 236, 697, 234, 700, 230, 701, 218, 700, 212, 698, 203, 695, 197, 693, 187, 690, 177, 685, 173, 684, 165, 695, 162, 699, 159, 699, 156, 697, 152, 688, 148, 682, 147, 675, 145, 672, 135, 660, 131, 651, 132, 647, 139, 638, 146, 635, 144, 627, 144, 625, 151, 629, 157, 630, 164, 635, 169, 637, 175, 636, 177, 633, 183, 633, 188, 640, 200, 636, 209, 634, 211, 630, 213, 624, 215, 618, 219, 615, 219, 611, 216, 607, 212, 603, 211, 599, 215, 596, 219, 595, 220, 588, 224, 586, 221, 584, 217, 580, 212],
    alt: 'Ilmiora',
    href: '/nationalities/ilmiora'
  },
  {
    id: 'eshmir',
    name: 'Eshmir',
    shape: 'poly',
    coords: [937, 47, 942, 39, 945, 36, 953, 32, 951, 22, 958, 14, 968, 13, 974, 13, 977, 19, 983, 21, 986, 33, 988, 39, 994, 48, 999, 55, 998, 73, 998, 76, 992, 81, 987, 84, 984, 85, 979, 85, 976, 83, 970, 82, 962, 76, 960, 74, 955, 76, 954, 77, 950, 78, 947, 78, 942, 74, 939, 67, 935, 60, 934, 57],
    alt: 'Eshmir',
    href: '/nationalities/eshmir'
  },
  {
    id: 'isola-delle-citt�-purpuree',
    name: 'Isola delle Citt� Purpuree',
    shape: 'poly',
    coords: [760, 396, 768, 397, 772, 398, 772, 393, 775, 386, 781, 382, 783, 382, 788, 382, 791, 385, 793, 388, 795, 388, 800, 386, 808, 386, 809, 386, 812, 387, 813, 390, 815, 393, 829, 401, 831, 403, 829, 405, 826, 408, 824, 409, 822, 411, 820, 418, 820, 423, 830, 431, 831, 435, 832, 437, 831, 441, 828, 444, 825, 446, 817, 447, 815, 449, 808, 449, 800, 449, 798, 450, 791, 445, 791, 443, 790, 445, 789, 449, 787, 451, 781, 455, 779, 455, 772, 453, 766, 446, 767, 453, 766, 453, 761, 454, 761, 454, 754, 450, 753, 448, 752, 444, 751, 438, 753, 432, 758, 430, 759, 430, 763, 428, 767, 428, 771, 427, 772, 427, 774, 426, 774, 425, 773, 424, 770, 422, 767, 421, 765, 420, 764, 421, 762, 422, 759, 422, 757, 422, 755, 422, 754, 418, 753, 412, 751, 408, 750, 406, 750, 406, 751, 404, 755, 398, 755, 398, 755, 398],
    alt: 'Isola delle Citt� Purpuree',
    href: '/nationalities/isola-delle-citt�-purpuree'
  },
  {
    id: 'pan-tang',
    name: 'Pan Tang',
    shape: 'poly',
    coords: [409, 168, 405, 168, 395, 169, 399, 178, 400, 181, 400, 185, 400, 186, 386, 189, 386, 191, 385, 194, 384, 200, 385, 200, 385, 204, 383, 208, 382, 208, 376, 212, 376, 215, 378, 218, 379, 228, 380, 232, 382, 239, 387, 244, 388, 246, 399, 246, 405, 246, 406, 246, 414, 246, 417, 243, 422, 239, 429, 237, 431, 235, 434, 232, 437, 223, 446, 217, 447, 216, 451, 209, 456, 202, 458, 196, 459, 189, 459, 183, 459, 178, 440, 165, 438, 162, 438, 162, 434, 158, 430, 157, 425, 153, 413, 152, 413, 153, 406, 154, 404, 156, 404, 157, 405, 164],
    alt: 'Pan Tang',
    href: '/nationalities/pan-tang'
  },
  {
    id: 'dharijor',
    name: 'Dharijor',
    shape: 'poly',
    coords: [325, 50, 324, 53, 317, 54, 310, 53, 298, 53, 296, 57, 290, 63, 287, 69, 280, 68, 269, 69, 260, 75, 255, 71, 245, 72, 233, 78, 234, 84, 232, 92, 234, 99, 233, 105, 233, 112, 240, 122, 242, 128, 243, 135, 245, 143, 246, 147, 246, 154, 248, 156, 246, 163, 244, 167, 247, 171, 251, 177, 254, 182, 257, 187, 260, 192, 264, 194, 268, 200, 288, 192, 292, 190, 297, 182, 297, 176, 298, 166, 300, 160, 300, 158, 304, 158, 307, 158, 311, 164, 319, 172, 328, 172, 335, 172, 344, 171, 351, 160, 352, 160, 363, 155, 367, 152, 373, 148, 378, 143, 381, 140, 381, 131, 378, 126, 374, 124, 371, 119, 373, 107, 373, 105, 370, 101, 365, 99, 359, 92, 354, 90, 352, 87, 350, 83, 339, 76, 335, 74, 333, 71, 330, 65, 328, 60, 325, 53],
    alt: 'Dharijor',
    href: '/nationalities/dharijor'
  },
  {
    id: 'tarkesh',
    name: 'Tarkesh',
    shape: 'poly',
    coords: [327, 53, 314, 49, 299, 49, 299, 54, 290, 64, 282, 69, 276, 70, 273, 71, 261, 73, 256, 73, 253, 71, 238, 77, 232, 77, 226, 69, 223, 61, 222, 55, 220, 48, 212, 39, 208, 38, 202, 36, 197, 33, 194, 31, 190, 23, 188, 19, 185, 11, 182, 3, 186, 2, 218, 0, 257, 0, 301, 1, 345, 0, 362, 0, 369, 3, 373, 5, 375, 8, 376, 14, 374, 16, 377, 21, 379, 24, 381, 26, 382, 27, 386, 36, 386, 36, 386, 39, 386, 40, 384, 43, 382, 46, 380, 50, 377, 52, 372, 54, 368, 56, 361, 59, 352, 63, 342, 66, 338, 56, 334, 48, 322, 44],
    alt: 'Tarkesh',
    href: '/nationalities/tarkesh'
  },
  {
    id: 'jharkor',
    name: 'Jharkor',
    shape: 'poly',
    coords: [262, 197, 259, 192, 255, 188, 252, 186, 248, 180, 244, 171, 244, 162, 244, 155, 245, 150, 245, 135, 242, 128, 235, 109, 233, 102, 233, 90, 228, 73, 225, 61, 216, 44, 194, 38, 181, 33, 174, 44, 173, 54, 178, 66, 184, 70, 185, 73, 185, 87, 180, 97, 163, 108, 163, 113, 140, 131, 134, 139, 120, 147, 115, 149, 89, 157, 64, 165, 52, 167, 43, 173, 46, 179, 49, 190, 38, 200, 36, 206, 37, 215, 36, 223, 42, 226, 50, 223, 59, 223, 61, 224, 68, 225, 74, 226, 76, 226, 81, 223, 84, 222, 90, 221, 91, 217, 93, 214, 98, 212, 98, 210, 109, 208, 111, 204, 120, 204, 126, 205, 130, 207, 137, 208, 142, 208, 145, 208, 148, 207, 150, 206, 155, 201, 156, 201, 165, 201, 169, 198, 174, 197, 182, 197, 188, 198, 191, 199, 194, 201, 202, 205, 209, 214, 211, 217, 217, 219, 218, 220, 230, 223, 240, 219, 242, 219, 249, 212, 256, 208],
    alt: 'Jharkor',
    href: '/nationalities/jharkor'
  },
  {
    id: 'shazaar',
    name: 'Shazaar',
    shape: 'poly',
    coords: [243, 219, 236, 219, 218, 221, 215, 222, 210, 214, 201, 201, 187, 197, 178, 199, 169, 196, 161, 205, 147, 209, 141, 207, 134, 208, 129, 204, 115, 196, 106, 198, 98, 203, 96, 212, 93, 222, 86, 221, 79, 218, 77, 221, 67, 221, 52, 221, 42, 225, 37, 227, 41, 235, 45, 241, 48, 248, 52, 253, 54, 258, 57, 265, 61, 269, 79, 271, 88, 268, 96, 265, 103, 262, 113, 259, 120, 258, 124, 261, 129, 267, 137, 272, 143, 279, 149, 284, 154, 287, 157, 288, 175, 291, 180, 290, 183, 295, 189, 299, 197, 305, 202, 310, 206, 314, 211, 314, 218, 314, 224, 311, 238, 310, 244, 291, 244, 282, 238, 271, 250, 269, 249, 265, 254, 252, 254, 251, 255, 239, 255, 237, 250, 223],
    alt: 'Shazaar',
    href: '/nationalities/shazaar'
  },
  {
    id: 'pikarayd',
    name: 'Pikarayd',
    shape: 'poly',
    coords: [778, 553, 770, 555, 767, 562, 762, 568, 760, 574, 765, 578, 770, 582, 770, 587, 769, 593, 761, 596, 760, 601, 767, 606, 769, 607, 772, 612, 773, 619, 777, 622, 783, 622, 787, 622, 789, 626, 789, 633, 789, 637, 792, 641, 794, 646, 790, 651, 796, 654, 802, 654, 808, 655, 814, 657, 817, 660, 820, 662, 828, 663, 833, 663, 836, 667, 837, 671, 840, 673, 850, 676, 854, 677, 860, 681, 862, 683, 863, 693, 863, 698, 866, 703, 870, 703, 873, 702, 881, 700, 886, 698, 893, 696, 899, 693, 911, 688, 910, 685, 916, 681, 925, 675, 937, 668, 942, 663, 947, 659, 951, 655, 950, 651, 947, 647, 943, 642, 942, 637, 934, 631, 928, 628, 926, 622, 921, 617, 915, 617, 914, 616, 913, 606, 904, 603, 902, 603, 898, 602, 895, 592, 895, 589, 893, 586, 888, 586, 880, 587, 874, 588, 873, 587, 873, 580, 876, 578, 879, 575, 877, 571, 877, 564, 876, 561, 876, 556, 873, 550, 869, 548, 866, 547, 854, 537, 853, 537, 850, 532, 848, 532, 842, 532, 837, 535, 835, 537, 818, 540, 818, 540, 806, 541, 801, 543, 798, 543, 776, 545, 776, 547],
    alt: 'Pikarayd',
    href: '/nationalities/pikarayd'
  },
  {
    id: 'argimiliar',
    name: 'Argimiliar',
    shape: 'poly',
    coords: [773, 554, 768, 556, 761, 561, 760, 564, 758, 569, 759, 573, 762, 579, 767, 579, 769, 583, 772, 590, 768, 595, 764, 597, 762, 598, 764, 602, 768, 607, 771, 611, 771, 617, 774, 622, 784, 619, 786, 620, 789, 626, 792, 632, 790, 637, 792, 643, 792, 649, 794, 650, 799, 652, 804, 653, 809, 655, 814, 658, 823, 660, 828, 660, 835, 661, 834, 667, 840, 677, 852, 675, 861, 680, 862, 686, 861, 692, 868, 701, 872, 702, 868, 707, 857, 709, 856, 709, 849, 715, 848, 720, 849, 729, 849, 737, 849, 740, 840, 745, 825, 751, 817, 752, 798, 754, 785, 759, 779, 762, 769, 765, 761, 766, 754, 766, 747, 766, 742, 766, 741, 766, 730, 754, 723, 746, 718, 738, 713, 726, 711, 720, 707, 715, 705, 708, 704, 705, 702, 698, 701, 691, 706, 683, 708, 680, 719, 666, 719, 665, 719, 661, 719, 657, 716, 646, 714, 643, 708, 639, 698, 637, 688, 635, 680, 633, 676, 630, 674, 628, 670, 622, 663, 617, 659, 615, 656, 614, 654, 612, 651, 608, 648, 604, 640, 599, 632, 596, 627, 594, 625, 593, 623, 591, 622, 587, 622, 580, 622, 575, 627, 573, 630, 572, 637, 572, 641, 572, 647, 574, 647, 574, 653, 571, 649, 568, 649, 556, 655, 550, 658, 548, 668, 542, 671, 540, 674, 538, 677, 537, 681, 535, 688, 530, 693, 527, 697, 526, 704, 526, 706, 526, 713, 526, 708, 525, 704, 522, 705, 519, 705, 517, 705, 517, 708, 515, 712, 512, 715, 510, 719, 508, 722, 506, 725, 503, 726, 502, 728, 498, 730, 494, 731, 492, 734, 488, 735, 485, 739, 476, 741, 473, 744, 470, 747, 469, 748, 468, 760, 470, 761, 471, 768, 471, 769, 471, 776, 478, 778, 480, 779, 484, 779, 490, 779, 495, 780, 498, 786, 501, 789, 503, 791, 505, 793, 511, 793, 517, 792, 525, 790, 530, 788, 534, 785, 537, 783, 539, 779, 544, 779, 544],
    alt: 'Argimiliar',
    href: '/nationalities/argimiliar'
  },
  {
    id: 'filkhar',
    name: 'Filkhar',
    shape: 'poly',
    coords: [647, 615, 652, 619, 667, 622, 671, 622, 678, 633, 685, 636, 693, 637, 699, 638, 707, 640, 712, 645, 713, 652, 714, 658, 716, 664, 717, 669, 714, 673, 705, 679, 700, 682, 698, 687, 697, 689, 699, 697, 700, 699, 703, 705, 704, 709, 703, 713, 702, 715, 700, 717, 694, 717, 690, 718, 687, 718, 683, 719, 682, 720, 677, 720, 673, 719, 667, 714, 663, 711, 656, 698, 654, 694, 651, 690, 648, 690, 640, 692, 639, 693, 633, 696, 631, 696, 621, 692, 619, 690, 618, 678, 618, 669, 617, 661, 615, 655, 613, 644, 614, 637, 616, 633, 619, 625, 623, 619, 627, 616, 632, 614, 640, 612, 640, 612],
    alt: 'Filkhar',
    href: '/nationalities/filkhar'
  },
  {
    id: 'lormyr',
    name: 'Lormyr',
    shape: 'poly',
    coords: [620, 628, 620, 628, 615, 625, 612, 616, 616, 612, 619, 609, 621, 607, 615, 599, 611, 596, 611, 590, 607, 587, 596, 586, 590, 585, 587, 585, 582, 587, 576, 584, 574, 582, 575, 572, 579, 568, 580, 565, 575, 562, 568, 564, 564, 566, 562, 567, 558, 572, 558, 572, 554, 575, 552, 576, 545, 578, 540, 581, 539, 583, 536, 586, 530, 592, 529, 594, 524, 600, 522, 604, 521, 606, 521, 612, 522, 613, 523, 617, 523, 620, 523, 622, 523, 628, 521, 630, 516, 634, 510, 641, 511, 646, 512, 648, 512, 649, 511, 655, 507, 657, 503, 656, 498, 653, 491, 652, 485, 652, 484, 658, 484, 662, 484, 669, 484, 672, 484, 679, 484, 682, 483, 688, 481, 692, 480, 695, 479, 702, 480, 704, 485, 709, 486, 712, 498, 716, 502, 720, 507, 728, 509, 731, 513, 735, 516, 740, 521, 746, 523, 754, 524, 760, 524, 767, 524, 777, 530, 780, 533, 784, 535, 786, 539, 792, 545, 799, 550, 804, 554, 810, 561, 813, 563, 814, 567, 814, 566, 809, 562, 803, 560, 791, 560, 784, 564, 779, 571, 777, 578, 774, 578, 772, 585, 766, 585, 763, 584, 759, 574, 745, 576, 740, 582, 739, 587, 739, 592, 739, 596, 740, 605, 742, 607, 745, 611, 746, 616, 747, 625, 745, 631, 743, 638, 738, 644, 736, 653, 735, 660, 734, 663, 732, 665, 731, 669, 726, 670, 725, 671, 724, 671, 717, 671, 715, 666, 711, 662, 711, 659, 708, 659, 703, 658, 699, 653, 693, 646, 692, 641, 694, 639, 697, 636, 698, 628, 698, 626, 696, 624, 694, 624, 691, 618, 682, 617, 678, 617, 678, 616, 672, 615, 666, 615, 662, 615, 661, 614, 657, 611, 643, 609, 642, 612, 638, 617, 635, 618, 635],
    alt: 'Lormyr',
    href: '/nationalities/lormyr'
  },
  {
    id: 'oin',
    name: 'Oin',
    shape: 'poly',
    coords: [482, 714, 485, 714, 494, 719, 497, 720, 506, 724, 510, 728, 511, 730, 513, 735, 516, 743, 516, 746, 518, 751, 520, 756, 522, 762, 521, 769, 521, 774, 523, 778, 525, 789, 527, 797, 529, 799, 529, 800, 532, 807, 533, 811, 528, 813, 517, 814, 507, 814, 495, 815, 486, 815, 477, 808, 471, 800, 471, 787, 470, 782, 464, 766, 456, 762, 451, 760, 438, 751, 433, 747, 429, 743, 428, 740, 424, 735, 420, 730, 420, 727, 424, 719, 429, 710, 435, 706, 446, 705, 452, 704, 460, 705, 462, 706, 467, 708, 474, 708, 477, 709],
    alt: 'Oin',
    href: '/nationalities/oin'
  },
  {
    id: 'yu',
    name: 'Yu',
    shape: 'poly',
    coords: [425, 743, 438, 755, 444, 763, 458, 764, 466, 767, 469, 770, 470, 776, 470, 782, 471, 788, 474, 795, 476, 800, 480, 804, 485, 808, 491, 813, 322, 816, 326, 811, 333, 807, 336, 804, 350, 797, 359, 792, 362, 788, 366, 780, 371, 774, 377, 765, 380, 761, 383, 759, 385, 755, 389, 747, 393, 747, 399, 747, 409, 746, 411, 746],
    alt: 'Yu',
    href: '/nationalities/yu'
  },
  {
    id: 'nadsokor',
    name: 'Nadsokor',
    shape: 'circle',
    coords: [572, 241, 11],
    alt: 'Nadsokor',
    href: '/nationalities/nadsokor'
  },
  {
    id: 'solitudine-piangente',
    name: 'Solitudine Piangente',
    shape: 'poly',
    coords: [9, 581, 12, 575, 16, 575, 21, 575, 25, 576, 31, 582, 37, 584, 39, 579, 39, 571, 48, 566, 56, 561, 68, 559, 65, 566, 71, 575, 76, 579, 79, 583, 84, 580, 87, 574, 90, 570, 94, 566, 97, 563, 107, 555, 111, 555, 130, 556, 133, 556, 146, 561, 147, 562, 150, 567, 153, 571, 156, 578, 156, 584, 155, 587, 156, 587, 162, 586, 164, 584, 168, 582, 176, 583, 179, 583, 184, 587, 185, 589, 185, 593, 185, 599, 185, 602, 183, 610, 182, 616, 181, 619, 179, 621, 176, 625, 193, 624, 195, 627, 198, 635, 199, 639, 199, 642, 197, 648, 197, 653, 194, 657, 189, 661, 186, 666, 178, 671, 175, 672, 171, 673, 168, 675, 166, 678, 164, 682, 161, 687, 159, 694, 157, 696, 153, 698, 143, 699, 135, 699, 131, 699, 123, 700, 119, 700, 115, 699, 113, 699, 112, 704, 113, 710, 114, 712, 118, 713, 121, 714, 126, 715, 130, 717, 132, 720, 135, 725, 137, 728, 138, 731, 138, 734, 137, 742, 136, 747, 136, 752, 134, 755, 131, 758, 128, 760, 125, 762, 121, 765, 117, 767, 103, 775, 101, 776, 92, 779, 80, 780, 75, 780, 69, 779, 68, 785, 65, 791, 59, 795, 57, 795, 50, 796, 47, 796, 36, 796, 36, 801, 38, 808, 40, 811, 40, 816, 3, 814, 1, 741, 0, 670, 0, 615, 1, 579],
    alt: 'Solitudine Piangente',
    href: '/nationalities/solitudine-piangente'
  },
  {
    id: 'melnibone',
    name: 'Melniboné',
    shape: 'poly',
    coords: [390, 409, 387, 410, 375, 410, 372, 411, 355, 407, 343, 404, 320, 407, 323, 416, 322, 421, 322, 430, 327, 435, 334, 442, 336, 443, 352, 443, 358, 443, 354, 451, 348, 459, 338, 465, 334, 471, 327, 475, 322, 485, 313, 494, 312, 501, 312, 510, 314, 521, 320, 529, 329, 529, 333, 528, 339, 523, 345, 515, 354, 507, 360, 507, 368, 511, 374, 519, 382, 524, 390, 523, 401, 520, 406, 514, 405, 506, 401, 501, 396, 489, 402, 484, 408, 481, 415, 475, 417, 470, 421, 458, 422, 456, 430, 447, 431, 436, 431, 428, 438, 420, 444, 416, 442, 407, 429, 403, 422, 400, 416, 398, 404, 397, 399, 400],
    alt: 'Melnibon�',
    href: '/nationalities/melnibon�'
  },
  {
    id: 'org',
    name: 'Org',
    shape: 'poly',
    coords: [638, 200, 637, 191, 635, 186, 634, 180, 635, 176, 636, 170, 634, 166, 626, 161, 625, 157, 625, 147, 626, 141, 631, 138, 641, 138, 645, 143, 651, 135, 653, 134, 667, 133, 676, 143, 681, 145, 692, 147, 697, 153, 699, 159, 697, 166, 692, 168, 689, 170, 688, 176, 690, 181, 693, 186, 694, 189, 696, 199, 697, 205, 700, 214, 702, 223, 701, 228, 697, 232, 694, 233, 688, 233, 680, 230, 676, 229, 668, 225, 663, 223, 654, 223, 646, 223, 642, 223, 633, 215, 632, 212, 632, 206],
    alt: 'Org',
    href: '/nationalities/org'
  },
  {
    id: 'myrrhyn',
    name: 'Myrrhyn',
    shape: 'poly',
    coords: [3, 279, 8, 283, 17, 284, 27, 285, 31, 285, 39, 283, 44, 280, 47, 275, 51, 268, 51, 264, 53, 260, 52, 256, 47, 249, 47, 248, 43, 244, 39, 239, 36, 233, 35, 230, 33, 223, 35, 218, 38, 214, 38, 207, 37, 203, 41, 197, 43, 195, 47, 191, 48, 188, 47, 180, 45, 172, 49, 170, 53, 166, 61, 167, 64, 168, 69, 165, 69, 163, 75, 162, 79, 164, 84, 164, 94, 159, 99, 157, 106, 153, 114, 152, 119, 151, 125, 148, 129, 143, 140, 129, 141, 128, 160, 118, 160, 118, 160, 113, 163, 107, 170, 102, 173, 100, 176, 96, 181, 90, 187, 81, 187, 81, 184, 77, 180, 72, 178, 67, 175, 60, 175, 49, 182, 39, 184, 39, 192, 36, 201, 31, 201, 28, 201, 16, 201, 14, 199, 8, 198, 2, 197, 0, 154, 0, 109, 2, 62, 1, 17, 1, 1, 1, 0, 85, 0, 168, 1, 229, 0, 259, 0, 269],
    alt: 'Myrrhyn',
    href: '/nationalities/myrrhyn'
    }
    ];

interface WorldMapProps {
  width?: number;
  height?: number;
  containerClassName?: string;
  responsive?: boolean;
}

export default function WorldMap({ 
  width = 1600, 
  height = 1200, 
  containerClassName = "", 
  responsive = true 
}: WorldMapProps) {
  const router = useRouter();
  const [hoveredRegion, setHoveredRegion] = useState<string | null>(null);
  const [tooltipPos, setTooltipPos] = useState({ x: 0, y: 0 });

  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
    const rect = e.currentTarget.getBoundingClientRect();
    setTooltipPos({
      x: e.clientX - rect.left + 20,
      y: e.clientY - rect.top - 10
    });
  };

  const handleRegionHover = (regionId: string) => {
    setHoveredRegion(regionId);
  };

  const handleRegionLeave = () => {
    setHoveredRegion(null);
  };

  const handleRegionClick = (href: string) => {
    router.push(href);
  };

  // Calcola le dimensioni reali delle aree in base alle dimensioni della mappa visualizzata
  const scaleCoords = (coords: number[], originalWidth: number = 1000, originalHeight: number = 750): number[] => {
    if (coords.length === 3) {
      // Per i cerchi (x, y, raggio)
      return [
        (coords[0] / originalWidth) * width,
        (coords[1] / originalHeight) * height,
        (coords[2] / originalWidth) * width // Scala il raggio in proporzione alla larghezza
      ];
    } else {
      // Per poligoni (serie di coordinate x, y)
      return coords.map((coord, i) => {
        if (i % 2 === 0) {
          // x coordinate
          return (coord / originalWidth) * width;
        } else {
          // y coordinate
          return (coord / originalHeight) * height;
        }
      });
    }
  };

  return (
    <div 
      className={`relative ${responsive ? 'max-w-full overflow-auto' : ''} ${containerClassName}`}
    >
      <div 
        className="relative" 
        style={{ width: `${width}px`, height: `${height}px` }}
        onMouseMove={handleMouseMove}
      >
        <Image
          src="/images/map/world-map.png"
          alt="Mappa del mondo di Stormbringer"
          width={width}
          height={height}
          className="rounded-lg shadow-lg"
          unoptimized={true}
        />

        <svg 
          width={width} 
          height={height} 
          className="absolute top-0 left-0"
          style={{ pointerEvents: 'none' }}
        >
          {regions.map((region) => {
            const isHovered = hoveredRegion === region.id;
            
            if (region.shape === 'circle') {
              const [cx, cy, r] = scaleCoords(region.coords);
              return (
                <circle
                  key={region.id}
                  cx={cx}
                  cy={cy}
                  r={r}
                  fill={isHovered ? 'rgba(255, 215, 0, 0.3)' : 'transparent'}
                  stroke={isHovered ? 'rgba(255, 215, 0, 0.8)' : 'transparent'}
                  strokeWidth={2}
                  style={{ pointerEvents: 'all', cursor: 'pointer' }}
                  onMouseEnter={() => handleRegionHover(region.id)}
                  onMouseLeave={handleRegionLeave}
                  onClick={() => handleRegionClick(region.href)}
                />
              );
            } else if (region.shape === 'poly') {
              const points = scaleCoords(region.coords)
                .map((coord, i) => (i % 2 === 0 ? `${coord},` : coord))
                .join(' ');
              
              return (
                <polygon
                  key={region.id}
                  points={points}
                  fill={isHovered ? 'rgba(255, 215, 0, 0.3)' : 'transparent'}
                  stroke={isHovered ? 'rgba(255, 215, 0, 0.8)' : 'transparent'}
                  strokeWidth={2}
                  style={{ pointerEvents: 'all', cursor: 'pointer' }}
                  onMouseEnter={() => handleRegionHover(region.id)}
                  onMouseLeave={handleRegionLeave}
                  onClick={() => handleRegionClick(region.href)}
                />
              );
            }
            
            return null;
          })}
        </svg>

        {hoveredRegion && (
          <div 
            className="absolute bg-green-900 text-yellow-500 px-3 py-1 rounded-md shadow-lg z-10 font-medievalsharp"
            style={{ 
              left: `${tooltipPos.x}px`, 
              top: `${tooltipPos.y}px`,
              transform: 'translate(-50%, -100%)'
            }}
          >
            {regions.find(r => r.id === hoveredRegion)?.name}
          </div>
        )}
      </div>
    </div>
  );
} 